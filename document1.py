# -*- coding: utf-8 -*-
"""Documents Seaching.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16m0rXvJZQvb4p8dsfbXLpk53aG0lYYm9
"""

# pip install python-docx python-pptx

print('''

██████╗░░█████╗░░█████╗░██╗░░░██╗███╗░░░███╗███████╗███╗░░██╗████████╗
██╔══██╗██╔══██╗██╔══██╗██║░░░██║████╗░████║██╔════╝████╗░██║╚══██╔══╝
██║░░██║██║░░██║██║░░╚═╝██║░░░██║██╔████╔██║█████╗░░██╔██╗██║░░░██║░░░
██║░░██║██║░░██║██║░░██╗██║░░░██║██║╚██╔╝██║██╔══╝░░██║╚████║░░░██║░░░
██████╔╝╚█████╔╝╚█████╔╝╚██████╔╝██║░╚═╝░██║███████╗██║░╚███║░░░██║░░░
╚═════╝░░╚════╝░░╚════╝░░╚═════╝░╚═╝░░░░░╚═╝╚══════╝╚═╝░░╚══╝░░░╚═╝░░░

░██████╗███████╗░█████╗░██████╗░░█████╗░██╗░░██╗██╗███╗░░██╗░██████╗░
██╔════╝██╔════╝██╔══██╗██╔══██╗██╔══██╗██║░░██║██║████╗░██║██╔════╝░
╚█████╗░█████╗░░███████║██████╔╝██║░░╚═╝███████║██║██╔██╗██║██║░░██╗░
░╚═══██╗██╔══╝░░██╔══██║██╔══██╗██║░░██╗██╔══██║██║██║╚████║██║░░╚██╗
██████╔╝███████╗██║░░██║██║░░██║╚█████╔╝██║░░██║██║██║░╚███║╚██████╔╝
╚═════╝░╚══════╝╚═╝░░╚═╝╚═╝░░╚═╝░╚════╝░╚═╝░░╚═╝╚═╝╚═╝░░╚══╝░╚═════╝░
''')

import docx
from docx import Document
from pptx import Presentation
import glob
import os

def read_textfile(file_path):
  file_content = open(file_path, "r").read()
  return file_content

def read_docx(filename):
    doc = docx.Document(filename)
    fullText = []
    try:
      for para in doc.paragraphs:
        fullText.append(para.text)
    except:
      print("Info: No text Found")
    try:
      for block in doc.tables:
        for row in block.rows:
          row_data = []
          for cell in row.cells:
            for paragraph in cell.paragraphs:
              fullText.append(paragraph.text)
    except:
      pass
    return '\n'.join(fullText)

def read_ppt(file_path):
  prs = Presentation(file_path)
  file_content = ""
  try:
    for slide in prs.slides:
      for shape in slide.shapes:
        if hasattr(shape, "text"):
          file_content += shape.text+"\n"
  except:
    pass
  return file_content

def read_any_document(file_path):
  if file_path.endswith(".txt"):
    file_content = read_textfile(file_path)
    return file_content
  if file_path.endswith(".docx"):
    file_content = read_docx(file_path)
    return file_content
  if file_path.endswith(".pptx"):
    file_content = read_ppt(file_path)
    return file_content

def split_paragraph(file_content):
  return file_content.split("\n")

def split_sentences(file_content):
  sentences = []
  for s in file_content.split("."):
    for s1 in s.split("\n"):
      sentences.append(s1)
  return sentences

def search_for_word(text_list, word):
  found_text = []
  for text in text_list:
    if word in text:
      found_text.append(text)
  return found_text

def count_word(file_content, word):
  fc = file_content.replace("\n", " ").replace("\t", " ")
  counts = fc.count(word)
  return counts

def find_sentences_paragraph_with_word(file_path, word):
  try:
    file_content = read_any_document(file_path)
    if file_content is None:
      return 0, [], []
    file_content = file_content.lower()
  except Exception as e:
    print(e)
    print("File Does not Exist: ", file_path)
    return 0, [], []
  sentences = split_sentences(file_content)
  paragraph = split_paragraph(file_content)
  found_sentences = search_for_word(sentences, word)
  found_paragraph = search_for_word(paragraph, word)
  word_count = count_word(file_content, word)

  return word_count, found_sentences, found_paragraph

def save_results(filename, word, word_occurance, sentences, paragraph):
  print("File Saved as ", filename)
  with open(f"{filename}.txt", "w", encoding="utf-8") as fp:
    fp.writelines(f"{word}: {word_occurance}\n")
    
    fp.writelines("\n\nFollowing Sentences Have word:\n")
    for index, s in enumerate(sentences):
      fp.writelines(f"{index}: {s}\n")
    fp.writelines("\n\nFollowing paragraph Have word:\n")
    for index, p in enumerate(paragraph):
      fp.writelines(f"{index}: {p}\n")
    print("#"*10)
    

def save_results_multiple(filename, results):
  print("File Saved as ", filename)
  with open(f"{filename}.txt", "w", encoding="utf-8") as fp:
    for filename, word, word_occurance, sentences, paragraph in results:
      fp.writelines(f"Filename: {filename}\n")
      fp.writelines(f"{word}: {word_occurance}\n")
      fp.writelines("\n\nFollowing Sentences Have word:\n")
      for index, s in enumerate(sentences):
        fp.writelines(f"{index}: {s}\n")
      fp.writelines("\n\nFollowing paragraph Have word:\n")
      for index, p in enumerate(paragraph):
        fp.writelines(f"{index}: {p}\n")
      print("#"*10)

def display(wc, sent, para, word):
  print("word cound:", wc)
  print("\nsentences")
  sg = 10
  for s in sent:
    ws = s.split(" ")
    if " " in word:
      w1 = word.split(" ")[0]
      w2 = word.split(" ")[-1]
      wi = ws.index(w1)

      si = max(0, wi-sg)
      ei = min(wi+sg, len(s))
      print(' '.join(ws[si:ei]))

    else:
      if word in ws:
        wi = ws.index(word)
        si = max(0, wi-sg)
        ei = min(wi+sg, len(s))
        print(' '.join(ws[si:ei]))

  print("\nparagraphs")

  for s in para:
    ws = s.split(" ")
    if " " in word:
      w1 = word.split(" ")[0]
      w2 = word.split(" ")[-1]
      wi = ws.index(w1)

      si = max(0, wi-sg)
      ei = min(wi+sg, len(s))
      print(' '.join(ws[si:ei]))

    else:
      if word in ws:
        wi = ws.index(word)
        si = max(0, wi-sg)
        ei = min(wi+sg, len(s))
        print(' '.join(ws[si:ei]))

  print("\n")
  print("#"*50)

def get_all_documents(folder_path, word, save=False):
  word = word.lower()
  if os.path.exists(folder_path):
    ppt_files = glob.glob(f"{folder_path}/*.pptx")
    docx_files = glob.glob(f"{folder_path}/*.docx")
    all_files = ppt_files + docx_files

    results = []
    for file_path in all_files:
      print(file_path)
      wc, sent, para = find_sentences_paragraph_with_word(file_path, word)

      display(wc, sent, para, word)
      results.append([file_path, word, wc, sent, para])

    if save:
      save_results_multiple("results", results)
  else:
    print("Folder Does not Exist")

"""# Write you folder path and word that you want to search.

- "./Task" is your folder path
- "slice" is you words
"""

# if __name__ == "__main__":
#   import argparse
#   # Initialize parser
#   parser = argparse.ArgumentParser()

#   parser.add_argument("-p", "--path", help = "Input folder path", required=True)
#   parser.add_argument("-w", "--word", help = "Search word", required=True)

#   args = parser.parse_args()

#   path = args.path
#   word = args.word

#   if not os.path.exists(path):
#     print("Path Does not Exist")
#   else:
#     if os.path.isdir(path):
#       get_all_documents(folder_path=path, word=word)
#     if os.path.isfile(path):
#       """# Single File Output"""
#       wc, sent, para = find_sentences_paragraph_with_word(file_path=path, word=word)
#       display(wc, sent, para, word)
#       save_results(path, word, wc, sent, para)


if __name__ == "__main__":
    # Initialize parser

  while True:
    word = input("Enter word to search.\n")
    path = input("Enter Path to Search the Word.\n")
    save = input("Do you want to save search Results? (y/n).\n")
    print(f"-{path}-")
    if save.lower() == "y":
      save = True
    elif save.lower() == "n":
      save = False

    if not os.path.exists(path):
      print("Path Does not Exist")
    else:
      if os.path.isdir(path):
        get_all_documents(folder_path=path, word=word, save=save)
      if os.path.isfile(path):
        """# Single File Output"""
        wc, sent, para = find_sentences_paragraph_with_word(file_path=path, word=word)
        display(wc, sent, para, word)
        if save:
          save_results("results", word, wc, sent, para)
    print("#"*10)
    print("**END**")
    prompt = input ("Do you want to continue? (y/n)\n")
    if prompt.lower() == "y":
      continue
    else:
      break
